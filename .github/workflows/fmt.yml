name: windows

on:
  push:
  pull_request:
  repository_dispatch:
    types:
      - fmt_11.2.0

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        # windows-2019 has MSVC 2019 installed;
        # windows-2022 has MSVC 2022 installed:
        # https://github.com/actions/virtual-environments.
        os: [windows-2019]
        platform: [Win32, x64]
        toolset: [v142]
        standard: [17]
        shared: ["", -DBUILD_SHARED_LIBS=OFF]
        build_type: [Debug, Release]
        exclude:
          - { toolset: v141, standard: 20 }
          - { toolset: v142, standard: 14 }
          - { platform: Win32, toolset: v141 }
          - { platform: Win32, standard: 14 }
          - { platform: Win32, standard: 20 }
          - { platform: x64, toolset: v141, shared: -DBUILD_SHARED_LIBS=ON }
          - { platform: x64, standard: 14, shared: -DBUILD_SHARED_LIBS=ON }
          - { platform: x64, standard: 20, shared: -DBUILD_SHARED_LIBS=ON }
    env:
      work_directory: fmt  # 设置环境变量
        # include:
        #   - os: windows-2022
        #     platform: x64
        #     toolset: v143
        #     build_type: Debug
        #     standard: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_GITEE_PRIVATE_KEY }}
      - name: Add Gitee to known hosts
        run: |
          ssh-keyscan gitee.com >> ~/.ssh/known_hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts


      - uses: lukka/get-cmake@latest

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dding on non-Windows
        if: runner.os != 'Windows'
        run: |
          pip install dding
          mkdir -p ~/.dding
          dding_secret="${{ github.event.client_payload.dding_secret || env.DEFAULT_DDING_SECRET }}"
          dding_token="${{ github.event.client_payload.dding_token || env.DEFAULT_DDING_TOKEN }}"
          cat <<EOF > ~/.dding/config.json
          [
              {
                  "group": "default",
                  "secret": "$dding_secret",
                  "token": "$dding_token"
              }
          ]
          EOF

      - name: Install dding on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pip install dding
          New-Item -Path $HOME\.dding -ItemType Directory -Force
          $dding_secret = "${{ github.event.client_payload.dding_secret || env.DEFAULT_DDING_SECRET }}"
          $dding_token = "${{ github.event.client_payload.dding_token || env.DEFAULT_DDING_TOKEN }}"
          $config = @"
          [
              {
                  "group": "default",
                  "secret": "$dding_secret",
                  "token": "$dding_token"
              }
          ]
          "@
          $config | Out-File -FilePath $HOME\.dding\config.json -Encoding utf8

      # 下载代码============================================
      - name: Clone repository from Gitee with trace
        shell: pwsh
        run: |
          $env:GIT_TRACE = "1"
          git clone git@github.com:charlessoft/fmt_11.2.0.git  $env:work_directory

      - name: Set timezone
        run: tzutil /s "FLE Standard Time"

      - name: Create Build Environment
        working-directory: ${{ env.work_directory }}
        run: cmake -E make_directory ${{ env.work_directory }}/build

      - name: Configure
        # Use a bash shell for $GITHUB_WORKSPACE.
        shell: bash
        working-directory: ${{ env.work_directory }}
        run: |
          cmake -A ${{matrix.platform}} -T ${{matrix.toolset}} \
                -DCMAKE_CXX_STANDARD=${{matrix.standard}} \
                ${{matrix.shared}} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                ${{ env.work_directory }}

      - name: Build
        working-directory: ${{ env.work_directory }}
        run: |
          $threads = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
          cmake --build . --config ${{matrix.build_type}} --parallel $threads

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: always()  # Ensure this step always runs to upload artifacts
        with:
          name: ${{ matrix.platform }}-${{ matrix.toolset }}-${{ matrix.build_type }}-${{ matrix.standard }}
          path: ${{ env.work_directory }}/package
    # - name: Test
    #   working-directory: ${{runner.workspace}}/build
    #   run: ctest -C ${{matrix.build_type}} -V
    #   env:
    #     CTEST_OUTPUT_ON_FAILURE: True


#  create-release:
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up environment
#        run: echo "RELEASE_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
#
#      - name: Install GitHub CLI
#        uses: sersoft-gmbh/setup-gh-cli-action@v2
#
#      - name: Delete existing release
#        env:
#          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: gh release delete $RELEASE_DATE --yes || true
#
#      - name: Create new release
#        env:
#          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: gh release create $RELEASE_DATE -t "Release $RELEASE_DATE" -n "Automated release for $RELEASE_DATE"
#
#
#      - name: ls Artifacts
#        run: |
#          ls ./artifacts
#
#      - name: Download Artifacts
#        uses: actions/download-artifact@v4
#        with:
#          path: ./artifacts
#
#      - name: Compress Artifacts
#        shell: bash
#        run: |
#          cd ./artifacts
#          for dir in */; do
#            zip -r "${dir%/}.zip" "$dir"
#          done
#
#      - name: Generate MD5 Checksums
#        run: |
#          > ./artifacts/filelist.txt  # 清空或创建 filelist.txt 文件
#          for file in ./artifacts/*.zip; do
#            # Calculate MD5 checksum
#            md5sum=$(md5sum "$file" | awk '{ print $1 }')
#
#            # Write to filelist.txt
#            echo "$(basename "$file") | ${md5sum}" >> ./artifacts/filelist.txt
#          done
#
#      - name: Upload Artifacts to Release
#        env:
#          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          cd ./artifacts
#          # gh release upload $RELEASE_DATE ./vc_lib_dbg_win32.zip
#          # gh release upload $RELEASE_DATE ./vc_lib_rel_win32.zip
#          # gh release upload $RELEASE_DATE ./vc_lib_dbg_x64.zip
#          # gh release upload $RELEASE_DATE ./vc_lib_rel_x64.zip
#          gh release upload $RELEASE_DATE ./artifacts/filelist.txt
#  # mingw:
#  #   runs-on: windows-latest
#  #   defaults:
#  #     run:
#  #       shell: msys2 {0}
#  #   strategy:
#  #     matrix:
#  #       sys: [ mingw64, ucrt64 ]
#  #   steps:
#  #   - name: Set timezone
#  #     run: tzutil /s "Ekaterinburg Standard Time"
#  #     shell: cmd
#  #   - uses: msys2/setup-msys2@61f9e5e925871ba6c9e3e8da24ede83ea27fa91f # v2.27.0
#  #     with:
#  #       release: false
#  #       msystem: ${{matrix.sys}}
#  #       pacboy: cc:p cmake:p ninja:p lld:p
#  #   - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
#  #   - name: Configure
#  #     run: cmake -B ../build -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug
#  #     env: { LDFLAGS: -fuse-ld=lld }
#  #   - name: Build
#  #     run: cmake --build ../build
#  #   - name: Test
#  #     run: ctest -j `nproc` --test-dir ../build
#  #     env:
#  #       CTEST_OUTPUT_ON_FAILURE: True
#
#     - name: Setup SSH
#       uses: webfactory/ssh-agent@v0.5.3
#       with:
#         ssh-private-key: ${{ secrets.SSH_GITEE_PRIVATE_KEY }}
#     - name: Add Gitee to known hosts
#       run: |
#         ssh-keyscan gitee.com >> ~/.ssh/known_hosts
#         ssh-keyscan github.com >> ~/.ssh/known_hosts
##
##
##      - uses: lukka/get-cmake@latest
##
##      - uses: actions/checkout@v3
##        with:
##          submodules: recursive
##
##      - name: Set up Python
##        uses: actions/setup-python@v2
##        with:
##          python-version: '3.8'
##
##      - name: Install dding on non-Windows
##        if: runner.os != 'Windows'
##        run: |
##          pip install dding
##          mkdir -p ~/.dding
##          dding_secret="${{ github.event.client_payload.dding_secret || env.DEFAULT_DDING_SECRET }}"
##          dding_token="${{ github.event.client_payload.dding_token || env.DEFAULT_DDING_TOKEN }}"
##          cat <<EOF > ~/.dding/config.json
##          [
##              {
##                  "group": "default",
##                  "secret": "$dding_secret",
##                  "token": "$dding_token"
##              }
##          ]
##          EOF
##
##      - name: Install dding on Windows
##        if: runner.os == 'Windows'
##        shell: pwsh
##        run: |
##          pip install dding
##          New-Item -Path $HOME\.dding -ItemType Directory -Force
##          $dding_secret = "${{ github.event.client_payload.dding_secret || env.DEFAULT_DDING_SECRET }}"
##          $dding_token = "${{ github.event.client_payload.dding_token || env.DEFAULT_DDING_TOKEN }}"
##          $config = @"
##          [
##              {
##                  "group": "default",
##                  "secret": "$dding_secret",
##                  "token": "$dding_token"
##              }
##          ]
##          "@
##          $config | Out-File -FilePath $HOME\.dding\config.json -Encoding utf8
##
##      # 下载代码============================================
##      - name: Clone repository from Gitee with trace
##        shell: pwsh
##        run: |
##          $env:GIT_TRACE = "1"
##          git clone git@github.com:charlessoft/fmt_11.2.0.git  $env:work_directory
##
##      - name: Set timezone
##        run: tzutil /s "FLE Standard Time"
##
##      - name: Create Build Environment
##        run: cmake -E make_directory ${{runner.workspace}}/build
##
##      - name: Configure
##        # Use a bash shell for $GITHUB_WORKSPACE.
##        shell: bash
##        working-directory: ${{runner.workspace}}/build
##        run: |
##          cmake -A ${{matrix.platform}} -T ${{matrix.toolset}} \
##                -DCMAKE_CXX_STANDARD=${{matrix.standard}} \
##                ${{matrix.shared}} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
##                $GITHUB_WORKSPACE
##
##      - name: Build
##        working-directory: ${{runner.workspace}}/build
##        run: |
##          $threads = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
##          cmake --build . --config ${{matrix.build_type}} --parallel $threads
##
##      - name: Upload artifact
##        uses: actions/upload-artifact@v4
##        if: always()  # Ensure this step always runs to upload artifacts
##        with:
##          name: ${{ matrix.platform }}-${{ matrix.toolset }}-${{ matrix.build_type }}-${{ matrix.standard }}
##          path: package
##    # - name: Test
##    #   working-directory: ${{runner.workspace}}/build
##    #   run: ctest -C ${{matrix.build_type}} -V
##    #   env:
##    #     CTEST_OUTPUT_ON_FAILURE: True
##
##
##  create-release:
##    runs-on: ubuntu-latest
##    needs: build
##    steps:
##      - name: Checkout
##        uses: actions/checkout@v4
##
##      - name: Set up environment
##        run: echo "RELEASE_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
##
##      - name: Install GitHub CLI
##        uses: sersoft-gmbh/setup-gh-cli-action@v2
##
##      - name: Delete existing release
##        env:
##          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##        run: gh release delete $RELEASE_DATE --yes || true
##
##      - name: Create new release
##        env:
##          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##        run: gh release create $RELEASE_DATE -t "Release $RELEASE_DATE" -n "Automated release for $RELEASE_DATE"
##
##
##      - name: ls Artifacts
##        run: |
##          ls ./artifacts
##
##      - name: Download Artifacts
##        uses: actions/download-artifact@v4
##        with:
##          path: ./artifacts
##
##      - name: Compress Artifacts
##        shell: bash
##        run: |
##          cd ./artifacts
##          for dir in */; do
##            zip -r "${dir%/}.zip" "$dir"
##          done
##
##      - name: Generate MD5 Checksums
##        run: |
##          > ./artifacts/filelist.txt  # 清空或创建 filelist.txt 文件
##          for file in ./artifacts/*.zip; do
##            # Calculate MD5 checksum
##            md5sum=$(md5sum "$file" | awk '{ print $1 }')
##
##            # Write to filelist.txt
##            echo "$(basename "$file") | ${md5sum}" >> ./artifacts/filelist.txt
##          done
##
##      - name: Upload Artifacts to Release
##        env:
##          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##        run: |
##          cd ./artifacts
##          # gh release upload $RELEASE_DATE ./vc_lib_dbg_win32.zip
##          # gh release upload $RELEASE_DATE ./vc_lib_rel_win32.zip
##          # gh release upload $RELEASE_DATE ./vc_lib_dbg_x64.zip
##          # gh release upload $RELEASE_DATE ./vc_lib_rel_x64.zip
##          gh release upload $RELEASE_DATE ./artifacts/filelist.txt
##  # mingw:
##  #   runs-on: windows-latest
##  #   defaults:
##  #     run:
##  #       shell: msys2 {0}
##  #   strategy:
##  #     matrix:
##  #       sys: [ mingw64, ucrt64 ]
##  #   steps:
##  #   - name: Set timezone
##  #     run: tzutil /s "Ekaterinburg Standard Time"
##  #     shell: cmd
##  #   - uses: msys2/setup-msys2@61f9e5e925871ba6c9e3e8da24ede83ea27fa91f # v2.27.0
##  #     with:
##  #       release: false
##  #       msystem: ${{matrix.sys}}
##  #       pacboy: cc:p cmake:p ninja:p lld:p
##  #   - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
##  #   - name: Configure
##  #     run: cmake -B ../build -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug
##  #     env: { LDFLAGS: -fuse-ld=lld }
##  #   - name: Build
##  #     run: cmake --build ../build
##  #   - name: Test
##  #     run: ctest -j `nproc` --test-dir ../build
##  #     env:
##  #       CTEST_OUTPUT_ON_FAILURE: True
